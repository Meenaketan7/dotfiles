-- return {
--     {
--       "williamboman/mason.nvim",
--       dependencies = {
--         "williamboman/mason-lspconfig.nvim",
--       },
--       config = function()
--         -- import mason
--         local mason = require("mason")
--
--         -- import mason-lspconfig
--         local mason_lspconfig = require("mason-lspconfig")
--
--         -- enable mason and configure icons
--         mason.setup({
--           ui = {
--             icons = {
--               package_installed = "✓",
--               package_pending = "➜",
--               package_uninstalled = "✗",
--             },
--           },
--         })
--
--         mason_lspconfig.setup({
--               -- list of servers for mason to install
--                   ensure_installed = {
--                   "tsserver",       -- ✅ valid
--                   "html",
--                   "cssls",
--                   "vuels",
--                   "tailwindcss",
--                   "emmet_ls",  
--                   "jsonls",
--                   "yamlls",
--                   "graphql",
--                   "bashls",
--                   "dockerls",
--                   "prismals",
--                   "elixirls",
--                   "zls",
--                   "jdtls",
--                   "clangd",
--                   "marksman",
--                   "lua_ls",
--                 }
--
--             })
--       end,
--     },
--      {
--       "neovim/nvim-lspconfig",
--       event = { "BufReadPre", "BufNewFile" },
--       dependencies = {
--         "hrsh7th/cmp-nvim-lsp", -- For autocompletion
--         { "antosha417/nvim-lsp-file-operations", config = true },
--         { "folke/neodev.nvim", opts = {} }, -- For better dev experience with Lua
--       },
--       config = function()
--         -- Import plugins
--         local lspconfig = require("lspconfig")
--         local mason_lspconfig = require("mason-lspconfig")
--         local cmp_nvim_lsp = require("cmp_nvim_lsp")
--         local keymap = vim.keymap -- for conciseness
--
--         -- LSP on_attach callback for key mappings
--         vim.api.nvim_create_autocmd("LspAttach", {
--           group = vim.api.nvim_create_augroup("UserLspConfig", {}),
--           callback = function(ev)
--             local opts = { buffer = ev.buf, silent = true }
--
--             -- LSP key mappings
--             local mappings = {
--               { "gR", "<cmd>FzfLua lsp_references<CR>", "Show LSP references" },
--               { "gD", vim.lsp.buf.declaration, "Go to declaration" },
--               { "gd", "<cmd>FzfLua lsp_definitions<CR>", "Show LSP definitions" },
--               { "gi", "<cmd>FzfLua lsp_implementations<CR>", "Show LSP implementations" },
--               { "gt", "<cmd>FzfLua lsp_type_definitions<CR>", "Show LSP type definitions" },
--               { "<leader>ca", vim.lsp.buf.code_action, "See available code actions" },
--               { "<leader>rn", vim.lsp.buf.rename, "Smart rename" },
--               { "<leader>D", "<cmd>FzfLua diagnostics<CR>", "Show buffer diagnostics" },
--               { "<leader>d", vim.diagnostic.open_float, "Show line diagnostics" },
--               { "[d", vim.diagnostic.goto_prev, "Go to previous diagnostic" },
--               { "]d", vim.diagnostic.goto_next, "Go to next diagnostic" },
--               { "K", vim.lsp.buf.hover, "Show documentation for cursor" },
--               { "<leader>rs", ":LspRestart<CR>", "Restart LSP" },
--             }
--
--             for _, mapping in ipairs(mappings) do
--               opts.desc = mapping[3]
--               keymap.set("n", mapping[1], mapping[2], opts)
--             end
--           end,
--         })
--
--         -- Capabilities for autocompletion
--         local capabilities = cmp_nvim_lsp.default_capabilities()
--
--         -- Define diagnostic signs
--         local signs = {
--           Error = " ",
--           Warn = " ",
--           Hint = "󰠠 ",
--           Info = " "
--         }
--         for type, icon in pairs(signs) do
--           local hl = "DiagnosticSign" .. type
--           vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
--         end
--
--         -- Mason-LSP Setup
--         mason_lspconfig.setup_handlers({
--           -- Default handler for all installed servers
--           function(server_name)
--             lspconfig[server_name].setup({
--               capabilities = capabilities,
--             })
--           end,
--
--           -- Custom handlers for specific servers
--           ["svelte"] = function()
--             lspconfig["svelte"].setup({
--               capabilities = capabilities,
--               on_attach = function(client, bufnr)
--                 vim.api.nvim_create_autocmd("BufWritePost", {
--                   pattern = { "*.js", "*.ts" },
--                   callback = function(ctx)
--                     client.notify("$/onDidChangeTsOrJsFile", { uri = ctx.match })
--                   end,
--                 })
--               end,
--             })
--           end,
--
--           ["graphql"] = function()
--             lspconfig["graphql"].setup({
--               capabilities = capabilities,
--               filetypes = { "graphql", "gql", "svelte", "typescriptreact", "javascriptreact" },
--             })
--           end,
--
--           ["emmet_ls"] = function()
--             lspconfig["emmet_ls"].setup({
--               capabilities = capabilities,
--               filetypes = { "html", "typescriptreact", "javascriptreact", "css", "sass", "scss", "less", "svelte" },
--             })
--           end,
--           ["elixirls"] = function()
--             lspconfig["elixirls"].setup({
--               capabilities = capabilities,
--               settings = {
--                 elixirLS = {
--                   dialyzerEnabled = true,
--                   fetchDeps = false,
--                   mixEnv = "dev",
--                   mixTarget = "host",
--                   enableTestLenses = true,
--                 },
--               },
--             })
--           end,
--      
--
--           ["lua_ls"] = function()
--             lspconfig["lua_ls"].setup({
--               capabilities = capabilities,
--               settings = {
--                 Lua = {
--                   diagnostics = {
--                     globals = { "vim" },
--                   },
--                   completion = {
--                     callSnippet = "Replace",
--                   },
--                 },
--               },
--             })
--           end,
--         })
--
--       end,
--     }
-- }
